version: 2.1
orbs:
  # orbs contain basic recipes and reproducible actions (install node, browser-tools, aws-cli, eb-cli)
  node: circleci/node@5.0.2
  browser-tools: circleci/browser-tools@1.2.3
  eb: circleci/aws-elastic-beanstalk@2.0.1
  aws-cli: circleci/aws-cli@3.1.1
jobs:
  # Test if project builds successfully
  build:
    docker:
      - image: "cimg/node:16.15"
    steps:
      # install node and checkout code
      - node/install:
          node-version: "16.15"
      # Checkout project with submodules
      - checkout
      - run: git submodule sync --recursive
      - run: git submodule update --recursive --init
      # Use root level package.json to install dependencies in the frontend app
      - run:
          name: Install Front-End Dependencies
          command: |
            echo "NODE --version" 
            echo $(node --version)
            echo "NPM --version" 
            echo $(npm --version)
            npm run frontend:install
      # Install backend API dependencies
      - run:
          name: Install API Dependencies
          command: |
            echo "# Install dependencies in the the backend API"
            npm run api:install
      # Build front-end app
      - run:
          name: Front-End Build
          command: |
            echo "# Building front-end"
            npm run frontend:build
      # Build the backend API
      - run:
          name: API Build
          command: |
            echo "# Building backend"
            npm run api:build
  # Run tests on the backend and frontend if no backend exists the frontend would fail... no tests rely on backend atm.
  test:
    docker:
      - image: "cimg/node:16.13.1-browsers"
    environment:
      - NODE_ENV: development
    steps:
      # We install chrome to run front-end tests
      - node/install:
          node-version: "16.15"
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          command: |
            google-chrome --version
            chromedriver --version
          name: Check install

      # Checkout project with submodules
      - checkout
      - run: git submodule sync --recursive
      - run: git submodule update --recursive --init
      - run:
          name: Install Front-End Dependencies
          command: |
            npm run frontend:install
      - run:
          name: Install API Dependencies
          command: |
            npm run api:install
      - run:
          name: Run Tests
          command: |
            echo "# Running API Tests"
            npm run api:test
            echo "# Running Front-End Tests"
            export CHROME_BIN=/usr/bin/google-chrome
            npm run frontend:test
  # deploy step will run only after manual approval
  deploy:
    docker:
      - image: "cimg/node:16.15"
    steps:
      - node/install:
          node-version: "16.15"
      # Checkout project with submodules
      - checkout
      - run: git submodule sync --recursive
      - run: git submodule update --recursive --init
      - eb/setup
      - run:
          name: Set Env Vars
          command: |
            cd Storefront-Backend---Express
            eb use storefront-backend---express-dev
            eb setenv NPM_USE_PRODUCTION=$NPM_USE_PRODUCTION POSTGRES_HOST=$POSTGRES_HOST POSTGRES_PORT=$POSTGRES_PORT POSTGRES_DB=$POSTGRES_DB POSTGRES_DB_TEST=$POSTGRES_DB_TEST POSTGRES_USER=$POSTGRES_USER POSTGRES_PASSWORD=$POSTGRES_PASSWORD ENV=$ENV BCRYPT_PASSWORD=$BCRYPT_PASSWORD HASH_ROUNDS=$HASH_ROUNDS JWT_SIGN_TOKEN=$JWT_SIGN_TOKEN
      - aws-cli/setup
      - run:
          name: Deploy App
          # Install, Build and finaly Deploy, First: API , Second: Front-End
          command: |
            echo "# Install, build, deploy in both apps"
            npm run frontend:install
            npm run api:install
            npm run frontend:build
            npm run api:build
            npm run deploy:all
workflows:
  Dev-Ops--CircleCi:
    jobs:
      - build
      - test:
          requires:
            - build
      # Hold after Tests Succeed for manual approval
      - hold:
          filters:
            branches:
              only:
                - main
          type: approval
          requires:
            - test
      # Deploy to aws, EB environment (Backend API) , S3 Buckit (Front-End)
      - deploy:
          requires:
            - hold
